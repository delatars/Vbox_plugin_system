; You can create vm objects and assign them any actions.
; Specify preffered section name.
[my centos]
; Mandatory keys.
;   Key specifies, which type of object will be generated (vm, group, alias).
type = vm
;   Key specifies plugins which will be performed for this object.
;actions = vbox_stop, port_forwarding, vbox_start, unix_update, vbox_stop
actions = vbox_stop, port_forwarding, vbox_start, unix_update, vbox_stop
;   Key specifies to which group this object belongs.
group = linux
snapshot = false
test_kill_timeout = 2
; User keys.
;   You can specify your keys and use it in your plugin's classobj attributes. ex: self.vm_name
vm_name = centos6-amd64_centos6_1527584044439_88125

credentials = root:root
forwarding_ports = vm_ssh:22:2030
vagrant_catalog = /vagrant/boxes
control_type = ssh

openstack_catalog = openstack1


; You can create groups and combine it with other objects.
;   Groups support attribute inheritance (groups attributes have a higher priority than vm attributes).
;   Specify name of the group.
[linux]
; Mandatory keys.
type = group
openstack_catalog = openstack_cluster1
; User keys.
;actions = Vbox_start, ...
;cred = root:root
control_type = win_rm

; You can combine some plugins in one action, named alias.
[aliases]
type = aliases
; By default aliases extends to all objects, but you can assign aliases at specific group
;group = linux
common_actions = port_forwarding

[linux_aliases]
type = aliases
; By default aliases extends to all objects, but you can assign aliases at specific group
group = linux
reboot = vbox_stop, vbox_start


;[openstack_cluster1]
;type = openstack
;openstack_url = https//
;openstack_username = user
;openstack_project = images
;openstack_hardware = hv-vi